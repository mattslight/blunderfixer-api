"""Add comments and fix indexing

Revision ID: fffc4f03c5c2
Revises: 7edd4ec71931
Create Date: 2025-05-22 12:00:12.023982

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "fffc4f03c5c2"
down_revision: Union[str, None] = "7edd4ec71931"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "archivemonth",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sa.String(), nullable=True, comment="Chess.com username"),
        sa.Column(
            "month", sa.String(), nullable=True, comment="Archive month in YYYY-MM"
        ),
        sa.Column(
            "raw_json",
            sa.JSON(),
            nullable=False,
            comment="Full JSON payload for that month",
        ),
        sa.Column(
            "fetched_at",
            sa.DateTime(),
            nullable=True,
            comment="When this archive was fetched",
        ),
        sa.Column(
            "processed",
            sa.Boolean(),
            nullable=True,
            comment="True once we've unpacked into Game rows",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Raw monthly JSON dumps from Chess.com",
    )
    op.create_index(
        op.f("ix_archivemonth_processed"), "archivemonth", ["processed"], unique=False
    )
    op.create_index(
        op.f("ix_archivemonth_username"), "archivemonth", ["username"], unique=False
    )
    op.create_table(
        "game",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "username",
            sa.String(),
            nullable=True,
            comment="Owner of the game record (lowercased username)",
        ),
        sa.Column(
            "game_uuid", sa.String(), nullable=True, comment="Chess.com game UUID"
        ),
        sa.Column(
            "url", sa.String(), nullable=True, comment="Link to the game on Chess.com"
        ),
        sa.Column(
            "played_at",
            sa.DateTime(),
            nullable=True,
            comment="UTC timestamp when the game was played",
        ),
        sa.Column(
            "time_class",
            sa.String(),
            nullable=True,
            comment="blitz, bullet, rapid, etc.",
        ),
        sa.Column(
            "time_control",
            sa.String(),
            nullable=True,
            comment="Time control string, e.g. '180+2'",
        ),
        sa.Column(
            "result",
            sa.String(),
            nullable=True,
            comment="Result from the player’s POV: win/loss/draw",
        ),
        sa.Column(
            "opponent_result",
            sa.String(),
            nullable=True,
            comment="Result from the opponent’s POV",
        ),
        sa.Column("eco", sa.String(), nullable=True, comment="ECO code, e.g. 'B12'"),
        sa.Column(
            "eco_url",
            sa.String(),
            nullable=True,
            comment="Link to the opening on chess.com",
        ),
        sa.Column(
            "pgn", sa.String(), nullable=True, comment="Full PGN text of the game"
        ),
        sa.Column(
            "raw",
            sa.JSON(),
            nullable=False,
            comment="The raw JSON object from Chess.com",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_uuid", name="uq_game_uuid"),
        comment="One row per imported Chess.com game",
    )
    op.create_index(op.f("ix_game_game_uuid"), "game", ["game_uuid"], unique=True)
    op.create_index(op.f("ix_game_username"), "game", ["username"], unique=False)
    op.create_table(
        "job",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "username",
            sa.String(),
            nullable=True,
            comment="Username for whom we’re syncing",
        ),
        sa.Column(
            "action",
            sa.String(),
            nullable=True,
            comment="What the job does, e.g. 'sync_archives'",
        ),
        sa.Column(
            "status",
            sa.String(),
            nullable=True,
            comment="queued/running/complete/failed",
        ),
        sa.Column(
            "total", sa.Integer(), nullable=True, comment="Number of months to process"
        ),
        sa.Column(
            "processed",
            sa.Integer(),
            nullable=True,
            comment="How many months have been done",
        ),
        sa.Column(
            "error",
            sa.String(),
            nullable=True,
            comment="Error message if the job failed",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            nullable=True,
            comment="When the job was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            nullable=True,
            comment="Last time the job record was updated",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Background sync job records",
    )
    op.create_index(op.f("ix_job_username"), "job", ["username"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_job_username"), table_name="job")
    op.drop_table("job")
    op.drop_index(op.f("ix_game_username"), table_name="game")
    op.drop_index(op.f("ix_game_game_uuid"), table_name="game")
    op.drop_table("game")
    op.drop_index(op.f("ix_archivemonth_username"), table_name="archivemonth")
    op.drop_index(op.f("ix_archivemonth_processed"), table_name="archivemonth")
    op.drop_table("archivemonth")
    # ### end Alembic commands ###
