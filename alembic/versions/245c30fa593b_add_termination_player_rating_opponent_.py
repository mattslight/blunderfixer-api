"""Add termination, player_rating, opponent_username, etc.

Revision ID: 245c30fa593b
Revises: fffc4f03c5c2
Create Date: 2025-05-22 14:04:09.408165

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '245c30fa593b'
down_revision: Union[str, None] = 'fffc4f03c5c2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('archivemonth', 'username',
               existing_type=sa.VARCHAR(),
               comment='Chess.com username for this archive',
               existing_comment='Chess.com username',
               existing_nullable=True)
    op.alter_column('archivemonth', 'month',
               existing_type=sa.VARCHAR(),
               comment='Archive month in YYYY-MM format',
               existing_comment='Archive month in YYYY-MM',
               existing_nullable=True)
    op.alter_column('archivemonth', 'raw_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Full JSON payload for the month',
               existing_comment='Full JSON payload for that month',
               existing_nullable=False)
    op.alter_column('archivemonth', 'fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_comment='When this archive was fetched',
               existing_nullable=True)
    op.alter_column('archivemonth', 'processed',
               existing_type=sa.BOOLEAN(),
               comment='True once unpacked into Game rows',
               existing_comment="True once we've unpacked into Game rows",
               existing_nullable=True)
    op.add_column('game', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True, comment='UTC timestamp when the game ended'))
    op.add_column('game', sa.Column('termination', sa.String(), nullable=True, comment='PGN [Termination] header value'))
    op.add_column('game', sa.Column('player_color', sa.String(), nullable=True, comment="Did the user play as 'white' or 'black'"))
    op.add_column('game', sa.Column('opponent_username', sa.String(), nullable=True, comment="Opponent's Chess.com username"))
    op.add_column('game', sa.Column('opponent_rating', sa.Integer(), nullable=True, comment="Opponent's rating at game time"))
    op.add_column('game', sa.Column('player_rating', sa.Integer(), nullable=True, comment="Player's own rating at game time"))
    op.alter_column('game', 'username',
               existing_type=sa.VARCHAR(),
               comment='Owner of the game record (Chess.com username)',
               existing_comment='Owner of the game record (lowercased username)',
               existing_nullable=True)
    op.alter_column('game', 'played_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_comment='UTC timestamp when the game was played',
               existing_nullable=True)
    op.alter_column('game', 'time_class',
               existing_type=sa.VARCHAR(),
               comment='Time class: bullet, blitz, rapid, etc.',
               existing_comment='blitz, bullet, rapid, etc.',
               existing_nullable=True)
    op.alter_column('game', 'result',
               existing_type=sa.VARCHAR(),
               comment="Result from the player's POV: win/loss/draw",
               existing_comment='Result from the player’s POV: win/loss/draw',
               existing_nullable=True)
    op.alter_column('game', 'opponent_result',
               existing_type=sa.VARCHAR(),
               comment="Result from the opponent's POV",
               existing_comment='Result from the opponent’s POV',
               existing_nullable=True)
    op.alter_column('game', 'eco_url',
               existing_type=sa.VARCHAR(),
               comment='Link to the opening on Chess.com',
               existing_comment='Link to the opening on chess.com',
               existing_nullable=True)
    op.alter_column('game', 'raw',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Raw JSON object from Chess.com',
               existing_comment='The raw JSON object from Chess.com',
               existing_nullable=False)
    op.create_index(op.f('ix_game_opponent_username'), 'game', ['opponent_username'], unique=False)
    op.alter_column('job', 'action',
               existing_type=sa.VARCHAR(),
               comment="Action type, e.g. 'sync_archives'",
               existing_comment="What the job does, e.g. 'sync_archives'",
               existing_nullable=True)
    op.alter_column('job', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_comment='When the job was created',
               existing_nullable=True)
    op.alter_column('job', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Last update timestamp',
               existing_comment='Last time the job record was updated',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('job', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment='Last time the job record was updated',
               existing_comment='Last update timestamp',
               existing_nullable=True)
    op.alter_column('job', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_comment='When the job was created',
               existing_nullable=True)
    op.alter_column('job', 'action',
               existing_type=sa.VARCHAR(),
               comment="What the job does, e.g. 'sync_archives'",
               existing_comment="Action type, e.g. 'sync_archives'",
               existing_nullable=True)
    op.drop_index(op.f('ix_game_opponent_username'), table_name='game')
    op.alter_column('game', 'raw',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='The raw JSON object from Chess.com',
               existing_comment='Raw JSON object from Chess.com',
               existing_nullable=False)
    op.alter_column('game', 'eco_url',
               existing_type=sa.VARCHAR(),
               comment='Link to the opening on chess.com',
               existing_comment='Link to the opening on Chess.com',
               existing_nullable=True)
    op.alter_column('game', 'opponent_result',
               existing_type=sa.VARCHAR(),
               comment='Result from the opponent’s POV',
               existing_comment="Result from the opponent's POV",
               existing_nullable=True)
    op.alter_column('game', 'result',
               existing_type=sa.VARCHAR(),
               comment='Result from the player’s POV: win/loss/draw',
               existing_comment="Result from the player's POV: win/loss/draw",
               existing_nullable=True)
    op.alter_column('game', 'time_class',
               existing_type=sa.VARCHAR(),
               comment='blitz, bullet, rapid, etc.',
               existing_comment='Time class: bullet, blitz, rapid, etc.',
               existing_nullable=True)
    op.alter_column('game', 'played_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_comment='UTC timestamp when the game was played',
               existing_nullable=True)
    op.alter_column('game', 'username',
               existing_type=sa.VARCHAR(),
               comment='Owner of the game record (lowercased username)',
               existing_comment='Owner of the game record (Chess.com username)',
               existing_nullable=True)
    op.drop_column('game', 'player_rating')
    op.drop_column('game', 'opponent_rating')
    op.drop_column('game', 'opponent_username')
    op.drop_column('game', 'player_color')
    op.drop_column('game', 'termination')
    op.drop_column('game', 'end_time')
    op.alter_column('archivemonth', 'processed',
               existing_type=sa.BOOLEAN(),
               comment="True once we've unpacked into Game rows",
               existing_comment='True once unpacked into Game rows',
               existing_nullable=True)
    op.alter_column('archivemonth', 'fetched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_comment='When this archive was fetched',
               existing_nullable=True)
    op.alter_column('archivemonth', 'raw_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Full JSON payload for that month',
               existing_comment='Full JSON payload for the month',
               existing_nullable=False)
    op.alter_column('archivemonth', 'month',
               existing_type=sa.VARCHAR(),
               comment='Archive month in YYYY-MM',
               existing_comment='Archive month in YYYY-MM format',
               existing_nullable=True)
    op.alter_column('archivemonth', 'username',
               existing_type=sa.VARCHAR(),
               comment='Chess.com username',
               existing_comment='Chess.com username for this archive',
               existing_nullable=True)
    # ### end Alembic commands ###
